/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Widget: WidgetObject
      WidgetConnection: WidgetConnectionObject
      PageInfo: PageInfoObject
      WidgetEdge: WidgetEdgeObject
      AggregateWidget: AggregateWidgetObject
      User: UserObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      WidgetSubscriptionPayload: WidgetSubscriptionPayloadObject
      WidgetPreviousValues: WidgetPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Widget: WidgetFieldDetails
      WidgetConnection: WidgetConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      WidgetEdge: WidgetEdgeFieldDetails
      AggregateWidget: AggregateWidgetFieldDetails
      User: UserFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      WidgetSubscriptionPayload: WidgetSubscriptionPayloadFieldDetails
      WidgetPreviousValues: WidgetPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      WidgetWhereUniqueInput: WidgetWhereUniqueInputInputObject
      WidgetWhereInput: WidgetWhereInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      WidgetCreateInput: WidgetCreateInputInputObject
      WidgetUpdateInput: WidgetUpdateInputInputObject
      WidgetUpdateManyMutationInput: WidgetUpdateManyMutationInputInputObject
      UserCreateInput: UserCreateInputInputObject
      WidgetCreateManyInput: WidgetCreateManyInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      WidgetUpdateManyInput: WidgetUpdateManyInputInputObject
      WidgetUpdateWithWhereUniqueNestedInput: WidgetUpdateWithWhereUniqueNestedInputInputObject
      WidgetUpdateDataInput: WidgetUpdateDataInputInputObject
      WidgetUpsertWithWhereUniqueNestedInput: WidgetUpsertWithWhereUniqueNestedInputInputObject
      WidgetScalarWhereInput: WidgetScalarWhereInputInputObject
      WidgetUpdateManyWithWhereNestedInput: WidgetUpdateManyWithWhereNestedInputInputObject
      WidgetUpdateManyDataInput: WidgetUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      WidgetSubscriptionWhereInput: WidgetSubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    WidgetType: WidgetTypeValues,
    WidgetOrderByInput: WidgetOrderByInputValues,
    UserType: UserTypeValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'widget', args?: QueryWidgetArgs[] | false, alias?: string  } 
  | { name: 'widgets', args?: QueryWidgetsArgs[] | false, alias?: string  } 
  | { name: 'widgetsConnection', args?: QueryWidgetsConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'widget'
  | 'widgets'
  | 'widgetsConnection'
  | 'user'
  | 'users'
  | 'usersConnection'


type QueryWidgetArgs =
  | 'where'
type QueryWidgetsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryWidgetsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  widget: {
    type: 'Widget'
    args: Record<QueryWidgetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: WidgetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Widget | null> | prisma.Widget | null
  }
  widgets: {
    type: 'Widget'
    args: Record<QueryWidgetsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WidgetWhereInput | null, orderBy?: prisma.WidgetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Widget[]> | prisma.Widget[]
  }
  widgetsConnection: {
    type: 'WidgetConnection'
    args: Record<QueryWidgetsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WidgetWhereInput | null, orderBy?: prisma.WidgetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WidgetConnection> | prisma.WidgetConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
}
  

// Types for Widget

type WidgetObject =
  | WidgetFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'settings', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type WidgetFields =
  | 'id'
  | 'type'
  | 'settings'
  | 'title'



  

export interface WidgetFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'WidgetType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Widget">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WidgetType> | prisma.WidgetType
  }
  settings: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WidgetConnection

type WidgetConnectionObject =
  | WidgetConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type WidgetConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface WidgetConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WidgetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'WidgetEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WidgetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WidgetEdge[]> | prisma.WidgetEdge[]
  }
  aggregate: {
    type: 'AggregateWidget'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WidgetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateWidget> | prisma.AggregateWidget
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for WidgetEdge

type WidgetEdgeObject =
  | WidgetEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type WidgetEdgeFields =
  | 'node'
  | 'cursor'



  

export interface WidgetEdgeFieldDetails {
  node: {
    type: 'Widget'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WidgetEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Widget> | prisma.Widget
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateWidget

type AggregateWidgetObject =
  | AggregateWidgetFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateWidgetFields =
  | 'count'



  

export interface AggregateWidgetFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'surname', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'refreshTime', args?: [] | false, alias?: string  } 
  | { name: 'backgroundImage', args?: [] | false, alias?: string  } 
  | { name: 'sidebarDisabled', args?: [] | false, alias?: string  } 
  | { name: 'googleToken', args?: [] | false, alias?: string  } 
  | { name: 'intraToken', args?: [] | false, alias?: string  } 
  | { name: 'spotifyToken', args?: [] | false, alias?: string  } 
  | { name: 'timezone', args?: [] | false, alias?: string  } 
  | { name: 'widgets', args?: UserWidgetsArgs[] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'password'
  | 'name'
  | 'surname'
  | 'address'
  | 'refreshTime'
  | 'backgroundImage'
  | 'sidebarDisabled'
  | 'googleToken'
  | 'intraToken'
  | 'spotifyToken'
  | 'timezone'
  | 'widgets'
  | 'phone'
  | 'type'


type UserWidgetsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  surname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  refreshTime: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  backgroundImage: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  sidebarDisabled: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  googleToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  intraToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  spotifyToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  timezone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  widgets: {
    type: 'Widget'
    args: Record<UserWidgetsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: WidgetWhereInput | null, orderBy?: prisma.WidgetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Widget[]> | prisma.Widget[]
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'UserType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserType | null> | prisma.UserType | null
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createWidget', args?: MutationCreateWidgetArgs[] | false, alias?: string  } 
  | { name: 'updateWidget', args?: MutationUpdateWidgetArgs[] | false, alias?: string  } 
  | { name: 'updateManyWidgets', args?: MutationUpdateManyWidgetsArgs[] | false, alias?: string  } 
  | { name: 'upsertWidget', args?: MutationUpsertWidgetArgs[] | false, alias?: string  } 
  | { name: 'deleteWidget', args?: MutationDeleteWidgetArgs[] | false, alias?: string  } 
  | { name: 'deleteManyWidgets', args?: MutationDeleteManyWidgetsArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createWidget'
  | 'updateWidget'
  | 'updateManyWidgets'
  | 'upsertWidget'
  | 'deleteWidget'
  | 'deleteManyWidgets'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'


type MutationCreateWidgetArgs =
  | 'data'
type MutationUpdateWidgetArgs =
  | 'data'
  | 'where'
type MutationUpdateManyWidgetsArgs =
  | 'data'
  | 'where'
type MutationUpsertWidgetArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteWidgetArgs =
  | 'where'
type MutationDeleteManyWidgetsArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createWidget: {
    type: 'Widget'
    args: Record<MutationCreateWidgetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WidgetCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Widget> | prisma.Widget
  }
  updateWidget: {
    type: 'Widget'
    args: Record<MutationUpdateWidgetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WidgetUpdateInput, where: WidgetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Widget | null> | prisma.Widget | null
  }
  updateManyWidgets: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyWidgetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WidgetUpdateManyMutationInput, where?: WidgetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertWidget: {
    type: 'Widget'
    args: Record<MutationUpsertWidgetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WidgetWhereUniqueInput, create: WidgetCreateInput, update: WidgetUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Widget> | prisma.Widget
  }
  deleteWidget: {
    type: 'Widget'
    args: Record<MutationDeleteWidgetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WidgetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Widget | null> | prisma.Widget | null
  }
  deleteManyWidgets: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyWidgetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: WidgetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'widget', args?: SubscriptionWidgetArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'widget'
  | 'user'


type SubscriptionWidgetArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  widget: {
    type: 'WidgetSubscriptionPayload'
    args: Record<SubscriptionWidgetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: WidgetSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WidgetSubscriptionPayload | null> | prisma.WidgetSubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
}
  

// Types for WidgetSubscriptionPayload

type WidgetSubscriptionPayloadObject =
  | WidgetSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type WidgetSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface WidgetSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WidgetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Widget'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WidgetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Widget | null> | prisma.Widget | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'WidgetPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WidgetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WidgetPreviousValues | null> | prisma.WidgetPreviousValues | null
  }
}
  

// Types for WidgetPreviousValues

type WidgetPreviousValuesObject =
  | WidgetPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'settings', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 

type WidgetPreviousValuesFields =
  | 'id'
  | 'type'
  | 'settings'
  | 'title'



  

export interface WidgetPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'WidgetType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WidgetPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WidgetType> | prisma.WidgetType
  }
  settings: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'surname', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'refreshTime', args?: [] | false, alias?: string  } 
  | { name: 'backgroundImage', args?: [] | false, alias?: string  } 
  | { name: 'sidebarDisabled', args?: [] | false, alias?: string  } 
  | { name: 'googleToken', args?: [] | false, alias?: string  } 
  | { name: 'intraToken', args?: [] | false, alias?: string  } 
  | { name: 'spotifyToken', args?: [] | false, alias?: string  } 
  | { name: 'timezone', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'password'
  | 'name'
  | 'surname'
  | 'address'
  | 'refreshTime'
  | 'backgroundImage'
  | 'sidebarDisabled'
  | 'googleToken'
  | 'intraToken'
  | 'spotifyToken'
  | 'timezone'
  | 'phone'
  | 'type'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  surname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  address: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  refreshTime: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  backgroundImage: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  sidebarDisabled: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  googleToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  intraToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  spotifyToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  timezone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'UserType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserType | null> | prisma.UserType | null
  }
}
  


export interface WidgetWhereUniqueInput {
  id?: string | null
}
export type WidgetWhereUniqueInputInputObject =
  | Extract<keyof WidgetWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface WidgetWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: prisma.WidgetType | null
  type_not?: prisma.WidgetType | null
  type_in?: prisma.WidgetType[]
  type_not_in?: prisma.WidgetType[]
  settings?: string | null
  settings_not?: string | null
  settings_in?: string[]
  settings_not_in?: string[]
  settings_lt?: string | null
  settings_lte?: string | null
  settings_gt?: string | null
  settings_gte?: string | null
  settings_contains?: string | null
  settings_not_contains?: string | null
  settings_starts_with?: string | null
  settings_not_starts_with?: string | null
  settings_ends_with?: string | null
  settings_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  AND?: WidgetWhereInput[]
  OR?: WidgetWhereInput[]
  NOT?: WidgetWhereInput[]
}
export type WidgetWhereInputInputObject =
  | Extract<keyof WidgetWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'settings', alias?: string  } 
  | { name: 'settings_not', alias?: string  } 
  | { name: 'settings_in', alias?: string  } 
  | { name: 'settings_not_in', alias?: string  } 
  | { name: 'settings_lt', alias?: string  } 
  | { name: 'settings_lte', alias?: string  } 
  | { name: 'settings_gt', alias?: string  } 
  | { name: 'settings_gte', alias?: string  } 
  | { name: 'settings_contains', alias?: string  } 
  | { name: 'settings_not_contains', alias?: string  } 
  | { name: 'settings_starts_with', alias?: string  } 
  | { name: 'settings_not_starts_with', alias?: string  } 
  | { name: 'settings_ends_with', alias?: string  } 
  | { name: 'settings_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
  phone?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  surname?: string | null
  surname_not?: string | null
  surname_in?: string[]
  surname_not_in?: string[]
  surname_lt?: string | null
  surname_lte?: string | null
  surname_gt?: string | null
  surname_gte?: string | null
  surname_contains?: string | null
  surname_not_contains?: string | null
  surname_starts_with?: string | null
  surname_not_starts_with?: string | null
  surname_ends_with?: string | null
  surname_not_ends_with?: string | null
  address?: string | null
  address_not?: string | null
  address_in?: string[]
  address_not_in?: string[]
  address_lt?: string | null
  address_lte?: string | null
  address_gt?: string | null
  address_gte?: string | null
  address_contains?: string | null
  address_not_contains?: string | null
  address_starts_with?: string | null
  address_not_starts_with?: string | null
  address_ends_with?: string | null
  address_not_ends_with?: string | null
  refreshTime?: number | null
  refreshTime_not?: number | null
  refreshTime_in?: number[]
  refreshTime_not_in?: number[]
  refreshTime_lt?: number | null
  refreshTime_lte?: number | null
  refreshTime_gt?: number | null
  refreshTime_gte?: number | null
  backgroundImage?: string | null
  backgroundImage_not?: string | null
  backgroundImage_in?: string[]
  backgroundImage_not_in?: string[]
  backgroundImage_lt?: string | null
  backgroundImage_lte?: string | null
  backgroundImage_gt?: string | null
  backgroundImage_gte?: string | null
  backgroundImage_contains?: string | null
  backgroundImage_not_contains?: string | null
  backgroundImage_starts_with?: string | null
  backgroundImage_not_starts_with?: string | null
  backgroundImage_ends_with?: string | null
  backgroundImage_not_ends_with?: string | null
  sidebarDisabled?: boolean | null
  sidebarDisabled_not?: boolean | null
  googleToken?: string | null
  googleToken_not?: string | null
  googleToken_in?: string[]
  googleToken_not_in?: string[]
  googleToken_lt?: string | null
  googleToken_lte?: string | null
  googleToken_gt?: string | null
  googleToken_gte?: string | null
  googleToken_contains?: string | null
  googleToken_not_contains?: string | null
  googleToken_starts_with?: string | null
  googleToken_not_starts_with?: string | null
  googleToken_ends_with?: string | null
  googleToken_not_ends_with?: string | null
  intraToken?: string | null
  intraToken_not?: string | null
  intraToken_in?: string[]
  intraToken_not_in?: string[]
  intraToken_lt?: string | null
  intraToken_lte?: string | null
  intraToken_gt?: string | null
  intraToken_gte?: string | null
  intraToken_contains?: string | null
  intraToken_not_contains?: string | null
  intraToken_starts_with?: string | null
  intraToken_not_starts_with?: string | null
  intraToken_ends_with?: string | null
  intraToken_not_ends_with?: string | null
  spotifyToken?: string | null
  spotifyToken_not?: string | null
  spotifyToken_in?: string[]
  spotifyToken_not_in?: string[]
  spotifyToken_lt?: string | null
  spotifyToken_lte?: string | null
  spotifyToken_gt?: string | null
  spotifyToken_gte?: string | null
  spotifyToken_contains?: string | null
  spotifyToken_not_contains?: string | null
  spotifyToken_starts_with?: string | null
  spotifyToken_not_starts_with?: string | null
  spotifyToken_ends_with?: string | null
  spotifyToken_not_ends_with?: string | null
  timezone?: string | null
  timezone_not?: string | null
  timezone_in?: string[]
  timezone_not_in?: string[]
  timezone_lt?: string | null
  timezone_lte?: string | null
  timezone_gt?: string | null
  timezone_gte?: string | null
  timezone_contains?: string | null
  timezone_not_contains?: string | null
  timezone_starts_with?: string | null
  timezone_not_starts_with?: string | null
  timezone_ends_with?: string | null
  timezone_not_ends_with?: string | null
  widgets_every?: WidgetWhereInput | null
  widgets_some?: WidgetWhereInput | null
  widgets_none?: WidgetWhereInput | null
  phone?: string | null
  phone_not?: string | null
  phone_in?: string[]
  phone_not_in?: string[]
  phone_lt?: string | null
  phone_lte?: string | null
  phone_gt?: string | null
  phone_gte?: string | null
  phone_contains?: string | null
  phone_not_contains?: string | null
  phone_starts_with?: string | null
  phone_not_starts_with?: string | null
  phone_ends_with?: string | null
  phone_not_ends_with?: string | null
  type?: prisma.UserType | null
  type_not?: prisma.UserType | null
  type_in?: prisma.UserType[]
  type_not_in?: prisma.UserType[]
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'surname_not', alias?: string  } 
  | { name: 'surname_in', alias?: string  } 
  | { name: 'surname_not_in', alias?: string  } 
  | { name: 'surname_lt', alias?: string  } 
  | { name: 'surname_lte', alias?: string  } 
  | { name: 'surname_gt', alias?: string  } 
  | { name: 'surname_gte', alias?: string  } 
  | { name: 'surname_contains', alias?: string  } 
  | { name: 'surname_not_contains', alias?: string  } 
  | { name: 'surname_starts_with', alias?: string  } 
  | { name: 'surname_not_starts_with', alias?: string  } 
  | { name: 'surname_ends_with', alias?: string  } 
  | { name: 'surname_not_ends_with', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'address_not', alias?: string  } 
  | { name: 'address_in', alias?: string  } 
  | { name: 'address_not_in', alias?: string  } 
  | { name: 'address_lt', alias?: string  } 
  | { name: 'address_lte', alias?: string  } 
  | { name: 'address_gt', alias?: string  } 
  | { name: 'address_gte', alias?: string  } 
  | { name: 'address_contains', alias?: string  } 
  | { name: 'address_not_contains', alias?: string  } 
  | { name: 'address_starts_with', alias?: string  } 
  | { name: 'address_not_starts_with', alias?: string  } 
  | { name: 'address_ends_with', alias?: string  } 
  | { name: 'address_not_ends_with', alias?: string  } 
  | { name: 'refreshTime', alias?: string  } 
  | { name: 'refreshTime_not', alias?: string  } 
  | { name: 'refreshTime_in', alias?: string  } 
  | { name: 'refreshTime_not_in', alias?: string  } 
  | { name: 'refreshTime_lt', alias?: string  } 
  | { name: 'refreshTime_lte', alias?: string  } 
  | { name: 'refreshTime_gt', alias?: string  } 
  | { name: 'refreshTime_gte', alias?: string  } 
  | { name: 'backgroundImage', alias?: string  } 
  | { name: 'backgroundImage_not', alias?: string  } 
  | { name: 'backgroundImage_in', alias?: string  } 
  | { name: 'backgroundImage_not_in', alias?: string  } 
  | { name: 'backgroundImage_lt', alias?: string  } 
  | { name: 'backgroundImage_lte', alias?: string  } 
  | { name: 'backgroundImage_gt', alias?: string  } 
  | { name: 'backgroundImage_gte', alias?: string  } 
  | { name: 'backgroundImage_contains', alias?: string  } 
  | { name: 'backgroundImage_not_contains', alias?: string  } 
  | { name: 'backgroundImage_starts_with', alias?: string  } 
  | { name: 'backgroundImage_not_starts_with', alias?: string  } 
  | { name: 'backgroundImage_ends_with', alias?: string  } 
  | { name: 'backgroundImage_not_ends_with', alias?: string  } 
  | { name: 'sidebarDisabled', alias?: string  } 
  | { name: 'sidebarDisabled_not', alias?: string  } 
  | { name: 'googleToken', alias?: string  } 
  | { name: 'googleToken_not', alias?: string  } 
  | { name: 'googleToken_in', alias?: string  } 
  | { name: 'googleToken_not_in', alias?: string  } 
  | { name: 'googleToken_lt', alias?: string  } 
  | { name: 'googleToken_lte', alias?: string  } 
  | { name: 'googleToken_gt', alias?: string  } 
  | { name: 'googleToken_gte', alias?: string  } 
  | { name: 'googleToken_contains', alias?: string  } 
  | { name: 'googleToken_not_contains', alias?: string  } 
  | { name: 'googleToken_starts_with', alias?: string  } 
  | { name: 'googleToken_not_starts_with', alias?: string  } 
  | { name: 'googleToken_ends_with', alias?: string  } 
  | { name: 'googleToken_not_ends_with', alias?: string  } 
  | { name: 'intraToken', alias?: string  } 
  | { name: 'intraToken_not', alias?: string  } 
  | { name: 'intraToken_in', alias?: string  } 
  | { name: 'intraToken_not_in', alias?: string  } 
  | { name: 'intraToken_lt', alias?: string  } 
  | { name: 'intraToken_lte', alias?: string  } 
  | { name: 'intraToken_gt', alias?: string  } 
  | { name: 'intraToken_gte', alias?: string  } 
  | { name: 'intraToken_contains', alias?: string  } 
  | { name: 'intraToken_not_contains', alias?: string  } 
  | { name: 'intraToken_starts_with', alias?: string  } 
  | { name: 'intraToken_not_starts_with', alias?: string  } 
  | { name: 'intraToken_ends_with', alias?: string  } 
  | { name: 'intraToken_not_ends_with', alias?: string  } 
  | { name: 'spotifyToken', alias?: string  } 
  | { name: 'spotifyToken_not', alias?: string  } 
  | { name: 'spotifyToken_in', alias?: string  } 
  | { name: 'spotifyToken_not_in', alias?: string  } 
  | { name: 'spotifyToken_lt', alias?: string  } 
  | { name: 'spotifyToken_lte', alias?: string  } 
  | { name: 'spotifyToken_gt', alias?: string  } 
  | { name: 'spotifyToken_gte', alias?: string  } 
  | { name: 'spotifyToken_contains', alias?: string  } 
  | { name: 'spotifyToken_not_contains', alias?: string  } 
  | { name: 'spotifyToken_starts_with', alias?: string  } 
  | { name: 'spotifyToken_not_starts_with', alias?: string  } 
  | { name: 'spotifyToken_ends_with', alias?: string  } 
  | { name: 'spotifyToken_not_ends_with', alias?: string  } 
  | { name: 'timezone', alias?: string  } 
  | { name: 'timezone_not', alias?: string  } 
  | { name: 'timezone_in', alias?: string  } 
  | { name: 'timezone_not_in', alias?: string  } 
  | { name: 'timezone_lt', alias?: string  } 
  | { name: 'timezone_lte', alias?: string  } 
  | { name: 'timezone_gt', alias?: string  } 
  | { name: 'timezone_gte', alias?: string  } 
  | { name: 'timezone_contains', alias?: string  } 
  | { name: 'timezone_not_contains', alias?: string  } 
  | { name: 'timezone_starts_with', alias?: string  } 
  | { name: 'timezone_not_starts_with', alias?: string  } 
  | { name: 'timezone_ends_with', alias?: string  } 
  | { name: 'timezone_not_ends_with', alias?: string  } 
  | { name: 'widgets_every', alias?: string  } 
  | { name: 'widgets_some', alias?: string  } 
  | { name: 'widgets_none', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'phone_not', alias?: string  } 
  | { name: 'phone_in', alias?: string  } 
  | { name: 'phone_not_in', alias?: string  } 
  | { name: 'phone_lt', alias?: string  } 
  | { name: 'phone_lte', alias?: string  } 
  | { name: 'phone_gt', alias?: string  } 
  | { name: 'phone_gte', alias?: string  } 
  | { name: 'phone_contains', alias?: string  } 
  | { name: 'phone_not_contains', alias?: string  } 
  | { name: 'phone_starts_with', alias?: string  } 
  | { name: 'phone_not_starts_with', alias?: string  } 
  | { name: 'phone_ends_with', alias?: string  } 
  | { name: 'phone_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface WidgetCreateInput {
  id?: string | null
  type?: prisma.WidgetType
  settings?: string
  title?: string
}
export type WidgetCreateInputInputObject =
  | Extract<keyof WidgetCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'settings', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface WidgetUpdateInput {
  type?: prisma.WidgetType | null
  settings?: string | null
  title?: string | null
}
export type WidgetUpdateInputInputObject =
  | Extract<keyof WidgetUpdateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'settings', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface WidgetUpdateManyMutationInput {
  type?: prisma.WidgetType | null
  settings?: string | null
  title?: string | null
}
export type WidgetUpdateManyMutationInputInputObject =
  | Extract<keyof WidgetUpdateManyMutationInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'settings', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string
  password?: string
  name?: string
  surname?: string
  address?: string | null
  refreshTime?: number | null
  backgroundImage?: string | null
  sidebarDisabled?: boolean | null
  googleToken?: string | null
  intraToken?: string | null
  spotifyToken?: string | null
  timezone?: string | null
  widgets?: WidgetCreateManyInput | null
  phone?: string
  type?: prisma.UserType | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'refreshTime', alias?: string  } 
  | { name: 'backgroundImage', alias?: string  } 
  | { name: 'sidebarDisabled', alias?: string  } 
  | { name: 'googleToken', alias?: string  } 
  | { name: 'intraToken', alias?: string  } 
  | { name: 'spotifyToken', alias?: string  } 
  | { name: 'timezone', alias?: string  } 
  | { name: 'widgets', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface WidgetCreateManyInput {
  create?: WidgetCreateInput[]
  connect?: WidgetWhereUniqueInput[]
}
export type WidgetCreateManyInputInputObject =
  | Extract<keyof WidgetCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  password?: string | null
  name?: string | null
  surname?: string | null
  address?: string | null
  refreshTime?: number | null
  backgroundImage?: string | null
  sidebarDisabled?: boolean | null
  googleToken?: string | null
  intraToken?: string | null
  spotifyToken?: string | null
  timezone?: string | null
  widgets?: WidgetUpdateManyInput | null
  phone?: string | null
  type?: prisma.UserType | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'refreshTime', alias?: string  } 
  | { name: 'backgroundImage', alias?: string  } 
  | { name: 'sidebarDisabled', alias?: string  } 
  | { name: 'googleToken', alias?: string  } 
  | { name: 'intraToken', alias?: string  } 
  | { name: 'spotifyToken', alias?: string  } 
  | { name: 'timezone', alias?: string  } 
  | { name: 'widgets', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface WidgetUpdateManyInput {
  create?: WidgetCreateInput[]
  update?: WidgetUpdateWithWhereUniqueNestedInput[]
  upsert?: WidgetUpsertWithWhereUniqueNestedInput[]
  delete?: WidgetWhereUniqueInput[]
  connect?: WidgetWhereUniqueInput[]
  set?: WidgetWhereUniqueInput[]
  disconnect?: WidgetWhereUniqueInput[]
  deleteMany?: WidgetScalarWhereInput[]
  updateMany?: WidgetUpdateManyWithWhereNestedInput[]
}
export type WidgetUpdateManyInputInputObject =
  | Extract<keyof WidgetUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface WidgetUpdateWithWhereUniqueNestedInput {
  where?: WidgetWhereUniqueInput
  data?: WidgetUpdateDataInput
}
export type WidgetUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof WidgetUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WidgetUpdateDataInput {
  type?: prisma.WidgetType | null
  settings?: string | null
  title?: string | null
}
export type WidgetUpdateDataInputInputObject =
  | Extract<keyof WidgetUpdateDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'settings', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface WidgetUpsertWithWhereUniqueNestedInput {
  where?: WidgetWhereUniqueInput
  update?: WidgetUpdateDataInput
  create?: WidgetCreateInput
}
export type WidgetUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof WidgetUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WidgetScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: prisma.WidgetType | null
  type_not?: prisma.WidgetType | null
  type_in?: prisma.WidgetType[]
  type_not_in?: prisma.WidgetType[]
  settings?: string | null
  settings_not?: string | null
  settings_in?: string[]
  settings_not_in?: string[]
  settings_lt?: string | null
  settings_lte?: string | null
  settings_gt?: string | null
  settings_gte?: string | null
  settings_contains?: string | null
  settings_not_contains?: string | null
  settings_starts_with?: string | null
  settings_not_starts_with?: string | null
  settings_ends_with?: string | null
  settings_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  AND?: WidgetScalarWhereInput[]
  OR?: WidgetScalarWhereInput[]
  NOT?: WidgetScalarWhereInput[]
}
export type WidgetScalarWhereInputInputObject =
  | Extract<keyof WidgetScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'settings', alias?: string  } 
  | { name: 'settings_not', alias?: string  } 
  | { name: 'settings_in', alias?: string  } 
  | { name: 'settings_not_in', alias?: string  } 
  | { name: 'settings_lt', alias?: string  } 
  | { name: 'settings_lte', alias?: string  } 
  | { name: 'settings_gt', alias?: string  } 
  | { name: 'settings_gte', alias?: string  } 
  | { name: 'settings_contains', alias?: string  } 
  | { name: 'settings_not_contains', alias?: string  } 
  | { name: 'settings_starts_with', alias?: string  } 
  | { name: 'settings_not_starts_with', alias?: string  } 
  | { name: 'settings_ends_with', alias?: string  } 
  | { name: 'settings_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface WidgetUpdateManyWithWhereNestedInput {
  where?: WidgetScalarWhereInput
  data?: WidgetUpdateManyDataInput
}
export type WidgetUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof WidgetUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface WidgetUpdateManyDataInput {
  type?: prisma.WidgetType | null
  settings?: string | null
  title?: string | null
}
export type WidgetUpdateManyDataInputInputObject =
  | Extract<keyof WidgetUpdateManyDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'settings', alias?: string  } 
  | { name: 'title', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  password?: string | null
  name?: string | null
  surname?: string | null
  address?: string | null
  refreshTime?: number | null
  backgroundImage?: string | null
  sidebarDisabled?: boolean | null
  googleToken?: string | null
  intraToken?: string | null
  spotifyToken?: string | null
  timezone?: string | null
  phone?: string | null
  type?: prisma.UserType | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'refreshTime', alias?: string  } 
  | { name: 'backgroundImage', alias?: string  } 
  | { name: 'sidebarDisabled', alias?: string  } 
  | { name: 'googleToken', alias?: string  } 
  | { name: 'intraToken', alias?: string  } 
  | { name: 'spotifyToken', alias?: string  } 
  | { name: 'timezone', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface WidgetSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: WidgetWhereInput | null
  AND?: WidgetSubscriptionWhereInput[]
  OR?: WidgetSubscriptionWhereInput[]
  NOT?: WidgetSubscriptionWhereInput[]
}
export type WidgetSubscriptionWhereInputInputObject =
  | Extract<keyof WidgetSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type WidgetTypeValues =
  | 'WORLD_TIME'
  
export type WidgetOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'settings_ASC'
  | 'settings_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserTypeValues =
  | 'ADMIN'
  | 'USER'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'surname_ASC'
  | 'surname_DESC'
  | 'address_ASC'
  | 'address_DESC'
  | 'refreshTime_ASC'
  | 'refreshTime_DESC'
  | 'backgroundImage_ASC'
  | 'backgroundImage_DESC'
  | 'sidebarDisabled_ASC'
  | 'sidebarDisabled_DESC'
  | 'googleToken_ASC'
  | 'googleToken_DESC'
  | 'intraToken_ASC'
  | 'intraToken_DESC'
  | 'spotifyToken_ASC'
  | 'spotifyToken_DESC'
  | 'timezone_ASC'
  | 'timezone_DESC'
  | 'phone_ASC'
  | 'phone_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  